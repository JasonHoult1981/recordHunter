<apex:page showHeader="false" sidebar="false" standardStylesheets="false" lightningStylesheets="true">
    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" lang="en">
        <apex:slds />
        <meta name="viewport" content="initial-scale=1.0" />
        <meta charset="utf-8" />
        
        <div id="guide" style="display: none;">
            <ol class="slds-setup-assistant">
                <li class="slds-setup-assistant__item">
                    <article class="slds-setup-assistant__step">
                        <div class="slds-setup-assistant__step-summary">
                            <div class="slds-media">
                                <div class="slds-setup-assistant__step-summary-content slds-media__body">
                                    <h3 class="slds-setup-assistant__step-summary-title slds-text-heading_small">Add Hostname for Visualforce pages to your App config</h3>
                                    <p>Your Visualforce Hostname: <span id="vfhost" style="font-weight:bold;"></span></p>
                                </div>
                            </div>
                        </div>
                    </article>
                </li>
            </ol>
        </div>
        
        <div id="spinner" class="slds-spinner_container">
            <div role="status" class="slds-spinner slds-spinner_medium">
                <span class="slds-assistive-text">Loading</span>
                <div class="slds-spinner__dot-a"></div>
                <div class="slds-spinner__dot-b"></div>
            </div>
        </div>
 
        <div id="map"></div>   
        
        <script>
        
        // Application Configurations
        let lexHost;
        
        // The map and its properties
        let map;
        let center = {lat: 35.679908, lng:139.7632473};
        let zoom = 14;
        let infoWindow
        const markers = {};
        const circles = {};

        let timer; // Guide timer
        
        (function () {
            // This is a function executed when the document is ready.
            // At this point, we do not have google map's API key yet(it is supposed to sent from LC side),
            // so there are not much we can do.
            // we will register a postMessage handler here to start listening to the messages from parent Window.
            // If the message is recieved, route the message to the right function and process them.
            window.addEventListener("message", function(event) {
                const data = JSON.parse(event.data);
                if (data.type === "INIT") onInit(data);
                else if (data.type === "UPDATE") onUpdate(data);
                else if (data.type === "GEOCODE") onGeocode(data);
            }, false);
            
            // If no INIT message is recieved within 5 seconds , 
            // there could be a issue with an set up so display the guide how to set up the component to the screen.
            timer = setTimeout(function() {
                hideSpinner();
                showGuide();
            }, 7000);
        })(); 
        function onInit(data) {
            // Finally we have the google map's API key, so inject the javascript to load the map with the key.
            // Make sure rest of the initialization are completed before loading the map.  
            // Also don't forget to stop the timer for the guide, too!
            
            // Necessary Initilazations
            lexHost = data.lexHost;
            center = data.center;
            
            // Stop the timer!
            clearTimeout(timer);
            hideGuide();
            
            // Inject the Google Map JS code! YAY!
            var script = document.createElement("script");
            script.src = "https://maps.googleapis.com/maps/api/js?key=" + data.apikey + "&callback=onScriptLoaded" ;
            document.body.appendChild(script);
        }
        function onScriptLoaded() {
            // This function is called when the Google Map script is fully loaded and ready to be used.
            // We will get rid of the blocking spinner first, then initialize the map, map!map!!map!!!
            
            // Stop the spinner
            hideSpinner();
            
            // Initialize the map
            map = new google.maps.Map(document.getElementById("map"), {
                center: center,
                zoom: zoom,
                disableDefaultUI: true,
                clickableIcons : false,
            });
            
            postMessage({type: "READY"});
        }
        function onUpdate(data) {
            if (data.center) {
               map.setCenter(data.center);
            }

            if (data.markers) {
                // Delete existing markers.
                Object.keys(markers).forEach(function(key) {
                    if (markers[key]) {
                        markers[key].setMap(null);
                        markers[key] = null;
                    }
                });
                // Create brand new markers
                data.markers.forEach(function(property) {
                    if (property.position.lat && property.position.lng) markers[property.id] = createMarker(property);
                });
            }
            
            if (data.circles) {
                // Delete existing circles.
                Object.keys(circles).forEach(function(key) {
                    if (circles[key]) {
                        circles[key].setMap(null);
                        circles[key] = null;
                    }
                });
                // Create brand new circle
                data.circles.forEach(function(property) {
                    if (property.center.lat && property.center.lng && property.radius) circles[property.id] = createCircle(property);
                });
            }
            
            // Set the map boudary to show all markers and circles.
            
            let bounds = new google.maps.LatLngBounds();
            Object.values(markers).forEach(function(marker) {
                if (marker) bounds.extend(marker.getPosition());
            });
            if (!bounds.isEmpty()) map.fitBounds(bounds);
            
            bounds = new google.maps.LatLngBounds();
            Object.values(circles).forEach(function(circle) {
                if (circle) bounds.union(circle.getBounds());
            });
            if (!bounds.isEmpty()) map.fitBounds(bounds);
        }
        function onGeocode(data) {
            getPositionFromAddress(data.location)
            .then(function(position) {
                postMessage({type: "GEOCODE_RESULT", latlng: {lat: position.lat(), lng: position.lng()}});
            })
            .catch(function(reason) {
                console.log(reason);
            });
        }
        function createMarker(property) {
            const marker = new google.maps.Marker(property);
            marker.setMap(map);
            
            if (property.content && property.content.title) {
                marker.addListener('click', function() {
                    if (infoWindow) infoWindow.close();
                    
                    let content = "";
                    content +='<section class="content">';
                    if (property.content.imageUrl) content +=  '<div class="avatar slds-avatar" style="background-image: url(\''+property.content.imageUrl+'\');"></div>';
                    content +=  '<div class="information">';
                    content +=    '<a href="javascript:void(0)" onclick="navigateToRecord(\'' +property.id+ '\')"><div class="slds-text-heading_small slds-truncate title" >' +property.content.title+ '</div></a>';
                    if (property.content.description) content +=    '<div class="slds-text-body_regular description">' +property.content.description+ '</div>';
                    content +=  '</div>';
                    content += '</section>';
                    
                    infoWindow = new google.maps.InfoWindow({
                        content: content,
                    });
                    infoWindow.addListener("closeclick", function() {
                        infoWindow = null;
                    }) ;
                    infoWindow.open(map, marker);
                });
            }
            return marker;
        }
        function createCircle(property) {
            const circle = new google.maps.Circle(property);
            circle.setMap(map);
            return circle;
        }
        function navigateToRecord(id) {
            postMessage({
                type: "NAVIGATE",
                id: id
            });
        }
        function postMessage(message) {
            parent.postMessage(JSON.stringify(message), "https://" + lexHost);
        }
        function getPositionFromAddress(address) {
            return new Promise(function(resolve, reject) {
                new google.maps.Geocoder().geocode({'address': address}, function(results, status) {
                    if (status === 'OK') resolve(results[0].geometry.location);
                    else reject("Geocode was not successful for the following reason: " + status);
                });
            });
        }
        function getAddressFromPosition(position) {
            return new Promise(function(resolve, reject) {
                new google.maps.Geocoder().geocode({'location': position}, function(results, status) {
                    if (status === 'OK') {
                        if (results[0]) resolve(results[0].formatted_address);
                        else resolve("No Results Found");
                    } else {
                        reject("Geocoder failed due to: " + status);
                    }
                });
            });
        }
        function getCurrentPosition() {
            return new Promise(function(resolve, reject){
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function(position) {
                        resolve({
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        });
                    }, function(error) {
                        reject(error.message);
                    });
                } else {
                    reject("This browser does not support geolocation service. Try other borowsers.");
                }            
            });
        }
        function showSpinner() {
            document.getElementById("spinner").style.display = "block";
        }
        function hideSpinner() {
            document.getElementById("spinner").style.display = "none";
        }
        function showGuide() {
            document.querySelector("#vfhost").innerHTML = location.origin.substring(8);
            document.getElementById("guide").style.display = "block";
        }
        function hideGuide() {
            document.getElementById("guide").style.display = "none";
        }
        </script>
        
        <style>
            #map {
            height: 100%;
            }
            html, body {
            height: 100%;
            margin: 0;
            padding: 0;
            }
            
            #guide {
                margin-top: 32px;
            }

            section.content {
            display: flex;
            } 
            section.content .avatar {
            min-height: 64px;
            min-width: 64px;
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
            margin-right: 8px;
            }
            section.content .information {
            display: flex;
            flex-direction: column;
            width: 180px;
            flex: 1;
            }
            section.content .information .title {
            margin-bottom: 2px;
            }
            section.content .information .description {
            white-space: pre-wrap;
            word-wrap: break-word;
            }
        </style>
        
    </html>
    
</apex:page>